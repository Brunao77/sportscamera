---
import { ClipsModel } from "../../models/clips";
import Maximize from "../../icons/Maximize.astro";
import Minimize from "../../icons/Minimize.astro";
import Play from "../../icons/Play.astro";
import Stop from "../../icons/Stop.astro";
import TrackNext from "../../icons/TrackNext.astro";
import TrackPrev from "../../icons/TrackPrev.astro";

const { clip_id } = Astro.params

if(!clip_id)
    return Astro.redirect("/");

const clip = await ClipsModel.getById({ clip_id: parseInt(clip_id, 10) })

if(!clip)
    return Astro.redirect("/");

const { title, date, clip_url } = clip

const newDate = new Date(date);
const formatedDate = newDate.toISOString().split('T')[0];
---

<!doctype html>
<html class="h-full" lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Clip / Sportscamera!</title>
	</head>
	<body class="overflow-hidden h-full">
        <div id="videoContainer" class="relative h-full bg-black" data-fullscreen="false">
            <div class='absolute top-1/2 left-1/2 w-20 h-20 border-4 border-white border-l-transparent rounded-full animate-spin hidden' id="spinnerVideo"></div>
            <video id="video" class="object-cover w-full" preload="metadata"></video>
            <div id="video-controls" class="absolute inset-x-0 bottom-0 w-full flex flex-col-reverse md:flex-col px-10 py-5 gap-1" data-state="hidden">
                <progress id="progress" class="w-full" min="0" value="0"><span id="progress-bar"></span></progress>
                <span id="tooltip" class="absolute  text-white top-[-10px]"></span>
                <div class="flex justify-between items-center">
                    <div class="flex text-white items-end gap-2">
                        <div><span id="current_time"></span> / <span id="duration"></span></div>
                        <span class="text-primary text-2xl">{title}</span>
                        <span>{formatedDate}</span>
                    </div>
                    <div class="flex items-center">
                        <button id="track_prev"><TrackPrev /></button>
                        <button id="playpause" data-state="play"><Play id="play_icon" /><Stop hidden id="stop_icon" /></button>
                        <button id="track_next"><TrackNext /></button>
                    </div>
                    <div class="relative flex items-center gap-2">
                        <ul class="absolute bg-[#6A6A6A] top-[-510%] flex flex-col hidden text-white rounded" id="rate_opts">
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4 rounded-t" data-rate="0.5">0.5</li>
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4" data-rate="0.75">0.75</li>
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4" data-rate="1">1</li>
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4" data-rate="1.5">1.5</li>
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4 rounded-b" data-rate="2">2</li>
                        </ul>
                        <button class="text-white font-medium px-5 rounded hover:bg-[#6A6A6A]" id="rate">x1</button>
                        <button id="fs" data-state="maximize"><Maximize id="maximize_icon" /><Minimize hidden id="minimize_icon"/></button>
                    </div>
                </div>
            </div>
        </div>
        <style>
            progress {
                overflow:hidden;
                height: 7px;
                -moz-border-radius:10px;
                -webkit-border-radius:10px;
                border-radius:10px;
                color:#9F4AA0;
                cursor:pointer;
            }
            progress::-webkit-progress-value {
                background-color:#9F4AA0;
            }
			:root {
				--color-primary: #9F4AA0;
				--color-secondary: #E3F7FA;
				--color-terciary: #969696;
				--color-white: #fff;
				--color-accent-rgb: 213, 255, 0;
				--color-primary-disabled: #ab98ac;

				--background-color: #E3F7FA;
				--background-twitch: var(--color-twitch-ice);

				--color-twitch-ice: #f0f0ff;
			}
			html {
				font-family: "Ubuntu", system-ui, sans-serif;
				background: var(--background-color);
			}
        </style>
        <script is:inline src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
        <script is:inline define:vars={{ clip_url }}>
            const video = document.getElementById('video')
            const videoContainer = document.getElementById('videoContainer');
            const playpause = document.getElementById('playpause');
            const progress = document.getElementById('progress');
            const progressBar = document.getElementById('progress-bar');
            const fullscreen = document.getElementById('fs');
            const playIcon = document.getElementById('play_icon');
            const stopIcon = document.getElementById('stop_icon');
            const maximizeIcon = document.getElementById('maximize_icon');
            const minimizeIcon = document.getElementById('minimize_icon');
            const trackPrev = document.getElementById('track_prev')
            const trackNext = document.getElementById('track_next')
            const currentTime = document.getElementById('current_time')
            const durationSpan = document.getElementById('duration')
            const rate = document.getElementById('rate')
            const rateOptions = document.getElementById('rate_opts')
            const videoSpinner = document.getElementById('spinnerVideo')
            const tooltip = document.getElementById("tooltip")

            if (Hls.isSupported()) {
                video.play()
                const  hls = new Hls();
                hls.attachMedia(video);
                hls.on(Hls.Events.MEDIA_ATTACHED, function () {
                    hls.loadSource(`/api/videos/getVideo/${clip_url}`);
                });
            }

            // Optionally, disable controls outside the allowed range
            video.addEventListener('seeked', function() {
                if (video.currentTime < allowedStart || video.currentTime > allowedEnd) {
                video.currentTime = allowedStart;
                }
            });

            rate.addEventListener('click', ()=>{
                rateOptions.classList.toggle('hidden')
            })

            const options = rateOptions.querySelectorAll('li');
            options.forEach(option => {
                option.addEventListener('click', (event) => {
                    const rateSelected = event.target.getAttribute('data-rate');
                    video.playbackRate = rateSelected;
                    rate.innerText = `x${rateSelected}`;
                    rateOptions.classList.add('hidden');
                });
            });

            trackNext.addEventListener('click', ()=>{
                video.currentTime += 5;
            })

            trackPrev.addEventListener('click', ()=>{
                video.currentTime -= 5;
            })

            playpause.addEventListener('click', ()=>{
                if (video.paused || video.ended) video.play();
				else video.pause();
            })

            video.addEventListener('play', function() {
				changeButtonState('playpause');
			}, false);
            
			video.addEventListener('pause', function() {
				changeButtonState('playpause');
			}, false);

            videoSpinner.classList.remove('hidden')
            video.addEventListener('loadedmetadata', function() {
                videoSpinner.classList.add('hidden')
				progress.setAttribute('max', video.duration);
                currentTimeDuration()
			});

            video.addEventListener('timeupdate', function() {
                currentTimeDuration()
				if (!progress.getAttribute('max')) progress.setAttribute('max', video.duration);
				progress.value = video.currentTime;
				progressBar.style.width = Math.floor((video.currentTime / video.duration) * 100) + '%';
			});

            video.addEventListener('click', ()=>{
                if (video.paused) video.play();
                else video.pause();
            })

            progress.addEventListener('click', function(e) {
				const pos = (e.pageX  - (this.offsetLeft + this.offsetParent.offsetLeft + this.offsetParent.offsetParent.offsetLeft)) / this.offsetWidth;
				video.currentTime = pos * video.duration;
			});

            progress.addEventListener('mouseover', function (e) {
				tooltip.classList.remove('hidden')
			});

			progress.addEventListener('mouseout', function (e) {
				tooltip.classList.add('hidden');
			});

			progress.addEventListener('mousemove', function (e) {
				const pos = (e.pageX - (this.offsetLeft + this.offsetParent.offsetLeft + this.offsetParent.offsetParent.offsetLeft)) / this.offsetWidth;
				const duration = pos * video.duration;
				const hours = Math.floor(duration / 3600);
				const minutes = Math.floor((duration % 3600) / 60);
				const seconds = Math.floor(duration % 60);
				const timeString = `${hours > 0 ? hours + ':' : ''}${hours > 0 && minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
				tooltip.textContent = timeString;
				tooltip.style.left = `${e.pageX}px`;
			});

            fullscreen.addEventListener('click', ()=>{
                if(fullscreen.getAttribute("data-state") === 'maximize'){
                    fullscreen.setAttribute("data-state", 'minimize')
                    minimizeIcon.classList.remove('hidden')
                    maximizeIcon.classList.add('hidden')
                    videoContainer.requestFullscreen();
                }else{
                    fullscreen.setAttribute("data-state", 'maximize')
                    document.exitFullscreen();
                    minimizeIcon.classList.add('hidden')
                    maximizeIcon.classList.remove('hidden')
                }
            })

            document.addEventListener('keydown', function(event) {
                if (event.code === 'ArrowRight') video.currentTime += 5;
                if (event.code === 'ArrowLeft') video.currentTime -= 5;
                if (event.code === 'Space') {
                    if (video.paused || video.ended) {
                        video.play()
					}else{
                        video.pause()
                    }
                }
                if (event.code === 'KeyF') changeButtonState('maximizeminimize')
            });

            function changeButtonState(type) {
				if (type == 'playpause') {
					if (video.paused || video.ended) {
                        playpause.setAttribute('data-state', 'play');
                        stopIcon.classList.add('hidden')
                        playIcon.classList.remove('hidden')
					}
					else {
                        playpause.setAttribute('data-state', 'pause');
                        stopIcon.classList.remove('hidden')
                        playIcon.classList.add('hidden')
					}
				}
				else if (type == 'maximizeminimize') {
                    if(fullscreen.getAttribute("data-state") === 'maximize'){
                        fullscreen.setAttribute("data-state", 'minimize')
                        minimizeIcon.classList.remove('hidden')
                        maximizeIcon.classList.add('hidden')
                        videoContainer.requestFullscreen();
                    }else{
                        fullscreen.setAttribute("data-state", 'maximize')
                        minimizeIcon.classList.add('hidden')
                        maximizeIcon.classList.remove('hidden')
                        document.exitFullscreen();
                    }
				}
			}

            function currentTimeDuration(){
                const currTime = Math.round(video.currentTime);
                const duration = Math.round(video.duration);
                
                const currentTimeStr = formatTime(currTime);
                const durationStr = formatTime(duration);

                currentTime.innerText = currentTimeStr;
                if(durationStr)
                    durationSpan.innerText = durationStr;
            }

            function formatTime(time) {
                let hours = Math.floor(time / 3600);
                let minutes = Math.floor((time % 3600) / 60);
                let seconds = time % 60;

                if (hours > 0) {
                    return `${hours}:${(minutes < 10 ? '0' : '') + minutes}:${(seconds < 10 ? '0' : '') + seconds}`;
                } else {
                    return `${minutes}:${(seconds < 10 ? '0' : '') + seconds}`;
                }
            }
            
        </script>
    </body>
</html>