---
import Input from "../components/Input.astro"
import { EstablishmentModel } from "../models/establishment";
import { CameraModel } from "../models/camera";
import Button from "../components/Button.astro";
import Establishment from "../icons/Establishment.astro";
import LayoutEstablishment from "../layouts/LayoutEstablishment.astro";
import Email from "../icons/Email.astro";
import Success from "../components/Success.astro"

const user = Astro.locals.user;
if (!user) {
	return Astro.redirect("/sign-in");
}

if(user.role !== 'A'){
	return Astro.redirect("/sign-in");
}

const establishments = await EstablishmentModel.getAll()

let error = ""
let success = ""

if(Astro.request.method === 'POST'){
	const formData = await Astro.request.formData()
	const name = formData.get('name')
    const establishment_id = formData.get('establishment_id')

	if(!name || !establishment_id){
		error = "Campos requeridos" 
		return new Response("Campos requeridos", { status:404 })
	}

	const camerasData = [];
	formData.forEach((value, key) => {
		const match = key.match(/cameras\[(\d+)\]\[(\w+)\]/);
		if (match) {
		const index = match[1];
		const field = match[2];

		if (!camerasData[index]) {
			camerasData[index] = {};
		}
		camerasData[index][field] = value;
		}
	});

	for (const cameraData of camerasData) {
		const { camera_id, field_name, rtsp, rtsp_low, deleted } = cameraData
        if(camera_id){
            if(deleted) await CameraModel.delete({ camera_id })
            await CameraModel.update({ camera_id, field_name, rtsp, rtsp_low })
        }
        else{
		    await CameraModel.insert({ field_name, rtsp, rtsp_low, establishment_id })
        }
	}

	success = "Creación con éxito"
	return new Response("Creación con éxito", { status:200 })
}
---

<LayoutEstablishment title="Agregar / SportsCamera!">
	<section class="bg-white h-full md:rounded-r-xl text-center z-0 w-full md:overflow-hidden">
		<strong class="font-medium text-2xl md:text-3xl text-primary text-nowrap">Editar Establecimiento</strong>
        <select id="select_establishment">
            {establishments && establishments.map(({ establisment_id, name })=>{
                return <option value={establisment_id}>{name}</option>
            })}
        </select>
		<form method="POST" class="text-start p-3 overflow-hidden" id="form">
			<div>
				<strong class="text-primary text-2xl font-medium">Usuario</strong>
				<div class="flex flex-wrap md:mb-2 justify-between">
                    <label>
						ID
						<Input name="establishment_id" readonly notSvg={true}>
						</Input>
					</label>
					<label>
						Email
						<Input placeholder="Email" name="email" type="email" notSvg={false} required>
							<Email />
						</Input>
					</label>
					<label>
						Nombre Establecimiento
						<Input placeholder="Nombre" name="name" type="text" notSvg={false} required>
							<Establishment />
						</Input>
					</label>
				</div>
			</div>
			<strong class="text-primary text-2xl font-medium my-2">Cámaras</strong>
			<div id="cameras_container" class="overflow-auto h-fit max-h-[300px] md:max-h-[500px]">
				<button id="remove_camera_btn" type="button" class="hidden bg-primary rounded-xl text-white font-medium text-xl w-14 py-1">-</button>
				<button id="add_camera_btn" type="button" class="bg-primary rounded-xl text-white font-medium text-xl w-14 py-1">+</button>
			</div>
			<div class="flex md:justify-end w-100 mt-5 gap-5">
				<Button type="submit" id="save_btn">
					<span id="content_btn">Guardar</span>
					<div class='w-6 h-6 border-4 border-ice border-l-transparent rounded-full animate-spin hidden' id="spinner"></div>
				</Button>
			</div>
		</form>
		{error && <span class="text-red-400">{error}</span>}
	</section>
	{success && <Success message={success} redirect="/add" />}
	<script>
		const form = document.getElementById('form')
		const saveBtn = document.getElementById('save_btn')
		const contentBtn = document.getElementById('content_btn')
		const spinner = document.getElementById('spinner')
		const addCameraBtn = document.getElementById("add_camera_btn")
		const removeCameraBtn = document.getElementById("remove_camera_btn")
		const camerasContainer = document.getElementById('cameras_container')
        const selectEstablishment = document.getElementById('select_establishment')

		class AddCamera extends HTMLElement {
			constructor(index, camera = {}) {
				super();
				this.innerHTML = `
				<hr class="md:hidden bg-primary">
				<div class="flex flex-wrap mb-2 justify-between">
                    ${camera.camera_id && `<label>
						Camera id
						<input placeholder="Cancha" readonly name="cameras[${index}][camera_id]" value="${camera.camera_id}" type="text" required class="bg-white w-full border-primary border-2 outline-0 px-4 py-1 md:py-3 text-black rounded-xl placeholder-terciary disabled:border-primary_disabled"></input>
					</label>`}
					<label>
						Nombre cancha
						<input placeholder="Cancha" name="cameras[${index}][field_name]" value="${camera.field_name || ''}" type="text" required class="bg-white w-full border-primary border-2 outline-0 px-4 py-1 md:py-3 text-black rounded-xl placeholder-terciary disabled:border-primary_disabled"></input>
					</label>
					<label>
						Rtsp principal
						<input placeholder="Rtsp principal" name="cameras[${index}][rtsp]" value="${camera.rtsp || ''}" type="text" required class="bg-white w-full border-primary border-2 outline-0 px-4 py-1 md:py-3 text-black rounded-xl placeholder-terciary disabled:border-primary_disabled"></input>
					</label>
					<label>
						Rtsp secundario
						<input placeholder="Rtsp secundario" name="cameras[${index}][rtsp_low]" value="${camera.rtsp_low || ''}" type="text" required class="bg-white w-full border-primary border-2 outline-0 px-4 py-1 md:py-3 text-black rounded-xl placeholder-terciary disabled:border-primary_disabled"></input>
					</label>
                     ${camera.camera_id && `<label>
						Eliminar
						<input name="cameras[${index}][deleted]" type="checkbox"></input>
					</label>`}
				</div>
				`;
			}
		}

		customElements.define('add-camera-container', AddCamera);

		let cameraIndex = 0;

        selectEstablishment.addEventListener('change', async function(){
            const res = await fetch(`/api/cameras/${this.value}`)
            const { cameras } = await res.json()
            cameras.forEach(({ camera_id, field_name, rtsp, rtsp_low }) => {
                const addCamera = new AddCamera(cameraIndex, { field_name, rtsp, rtsp_low });
                cameraIndex++
                camerasContainer.insertBefore(addCamera, removeCameraBtn);
			    removeCameraBtn.classList.remove('hidden')
            });
        })

		addCameraBtn.addEventListener('click', function() {
			cameraIndex++
			const addCamera = new AddCamera(cameraIndex);
			camerasContainer.insertBefore(addCamera, removeCameraBtn);
			removeCameraBtn.classList.remove('hidden')
		})

		removeCameraBtn.addEventListener('click', function() {
			const lastCamera = camerasContainer.querySelectorAll('add-camera-container');
			if (lastCamera.length > 0) {
				lastCamera[lastCamera.length - 1].remove();
				cameraIndex--;
				if (lastCamera.length === 2) removeCameraBtn.classList.add('hidden');
			}
		})
		
		form.addEventListener('submit', () =>{
			saveBtn.disabled = true
			contentBtn.style.display = 'none'
			spinner.classList.remove('hidden')
		})
	</script>
</LayoutEstablishment>