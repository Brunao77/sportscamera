---
import Layout from '../../layouts/Layout.astro'
import Input from '../../components/Input.astro'
import Button from '../../components/Button.astro';
import Success from '../../components/Success.astro';
import Email from '../../icons/Email.astro';
import { UserModel } from '../../models/user.js';
import { generateId } from "lucia";
import { TimeSpan, createDate } from "oslo";
import { sha256 } from "oslo/crypto";
import { encodeHex } from "oslo/encoding";
import { PasswordResetModel } from "../../models/password_reset.js";
import nodemailer from "nodemailer"

const user = Astro.locals.user;
if (user) {
	return Astro.redirect("/video-list");
}

export async function createPasswordResetToken(userId): Promise<string> {
	await PasswordResetModel.deleteUser({ user_id: userId })
	const tokenId = generateId(40);
	const tokenHash = encodeHex(await sha256(new TextEncoder().encode(tokenId)));
	await PasswordResetModel.insertToken({ token_hash: tokenHash, user_id: userId, expires_at: createDate(new TimeSpan(2, "h")) }) 
	return tokenId;
}

export async function sendPasswordResetToken(email, verificationLink): Promise<string> {
	const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: import.meta.env.EMAIL,
        pass: import.meta.env.EMAIL_PASSWORD,
      },
    });
    const mailOptions = {
      from: import.meta.env.EMAIL,
      to: email,
      subject: 'Password Reset',
      text: `Click the following link to reset your password: ${verificationLink}`,
    };
    const statusEmailSent = transporter.sendMail(mailOptions, (error) => {
      if (error) return 500
      return 200
    });

    return statusEmailSent
}

let error = ''
let success = ''
if(Astro.request.method === 'POST'){
    try {
        const data = await Astro.request.formData();
        const email = data.get("email");

        const result = await UserModel.findWithEmail({ email })

        if (!result){
            error = 'Email invalido'
        }
        else{
            const verificationToken = await createPasswordResetToken(result.id);
            const url = import.meta.env.MODE === 'development' ? import.meta.env.URL_DEVELOPMENT : import.meta.env.URL_PRODUCTION
            const verificationLink = url  + "/password_reset/" + verificationToken;

            const statusEmailSent = await sendPasswordResetToken(email, verificationLink);

            if(statusEmailSent === 500){
                error = 'Error sending email'
            }
            else{
                success = `Chequea tu casilla de mail`
            }
        }
    } catch (error) {
        console.error(error.message);
    }
}
---
<Layout>
	<form method="POST" class="bg-white flex flex-col items-start justify-center gap-5 p-4 rounded-xl w-full h-full md:h-1/2">
        <strong class="text-2xl text-primary">Recupera tu cuenta de SportsCamera</strong>
        <p class="text-wrap">Introduce el correo electrónico asociado a tu cuenta para cambiar tu contraseña.</p>
        <Input name="email" placeholder="Email" type="email" required>
            <Email />
        </Input>
        <Button type="submit">SIGUIENTE</Button>
    </form>
    {success && <Success message={success} />}
</Layout>