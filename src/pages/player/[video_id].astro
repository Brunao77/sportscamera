---
import Maximize from "../../icons/Maximize.astro";
import Minimize from "../../icons/Minimize.astro";
import Play from "../../icons/Play.astro";
import Stop from "../../icons/Stop.astro";
import TrackNext from "../../icons/TrackNext.astro";
import TrackPrev from "../../icons/TrackPrev.astro";
import Info from "../../icons/Info.astro";
import { VideosModel } from "../../models/videos";
import { CameraModel } from "../../models/camera";
import { EstablishmentModel } from "../../models/establishment";
import { convertirFormatoFecha } from "../../utils"

const { video_id } = Astro.params

if(!video_id)
    return Astro.redirect("/");

const video = await VideosModel.getById({ video_id })

if(!video)
    return Astro.redirect("/");

const { camera_id, date, start_time, end_time, video_url } = video

const camera = await CameraModel.getById({ camera_id })

const { establishment_id, field_name } = camera

const { name, address, phone } = await EstablishmentModel.getById({ establishment_id })

---

<!doctype html>
<html class="h-full" lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Sportscamera!</title>
	</head>
	<body class="overflow-hidden h-full">
        <div id="videoContainer" class="relative h-full bg-black" data-fullscreen="false">
            <video id="video" preload="metadata" src={video_url}></video>
            <div id="video-controls" class="absolute inset-x-0 bottom-0 w-full flex flex-col px-10 py-5 gap-3" data-state="hidden">
                <div class="flex justify-between items-center">
                    <div class="flex gap-2 items-center">
                        <button id="info"><Info /></button>
                        <div class="text-white"><span id="current_time"></span> / <span id="duration"></span></div>
                    </div>
                    <div class="flex items-center">
                        <button id="track_prev"><TrackPrev /></button>
                        <button id="playpause" data-state="play"><Play id="play_icon" /><Stop hidden id="stop_icon" /></button>
                        <button id="track_next"><TrackNext /></button>
                        <button class="bg-white h-7 w-7 rounded-full"></button>
                    </div>
                    <div class="relative flex items-center gap-2">
                        <ul class="absolute bg-[#6A6A6A] top-[-510%] flex flex-col hidden text-white rounded" id="rete_opts">
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4 rounded-t" data-rate="0.5">0.5</li>
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4" data-rate="0.75">0.75</li>
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4" data-rate="1">1</li>
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4" data-rate="1.5">1.5</li>
                            <li class="cursor-pointer hover:bg-[#7E7E7E] px-4 rounded-b" data-rate="2">2</li>
                        </ul>
                        <button class="text-white font-medium px-5 rounded hover:bg-[#6A6A6A]" id="rate">x1</button>
                        <button id="fs" data-state="maximize"><Maximize id="maximize_icon" /><Minimize hidden id="minimize_icon"/></button>
                    </div>
                </div>
                <progress id="progress" class="w-full" min="0" value="0"><span id="progress-bar"></span></progress>
            </div>
        </div>
        <div class={`fixed left-0 top-0 w-full h-full bg-[rgba(0,0,0,0.5)] hidden`} id="filter_bg"></div>
        <div id="info_modal" class="hidden bg-white absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 flex flex-col rounded text-2xl w-1/4 px-5 py-2 gap-2">
            <div class="flex justify-between items-center"><h1 class="text-[#9F4AA0]  text-5xl font-medium mb-2">{name}</h1><button id="close_modal" class="font-bold text-red-400 text-2xl">X</button></div>
            <span >Cancha: {field_name}</span>
            <span>Dirección: {address}</span>
            <span>Teléfono: {phone}</span>
            <span>Día: {convertirFormatoFecha(date)}</span>
            <span>Horario: {start_time.slice(0,-3)} - {end_time.slice(0,-3)}</span>
        </div>
        <style>
            progress {
                overflow:hidden;
                -moz-border-radius:10px;
                -webkit-border-radius:10px;
                border-radius:10px;
                color:#9F4AA0;
                cursor:pointer;
            }
            progress::-webkit-progress-value {
                background-color:#9F4AA0;
            }
        </style>
        <script>
            const videoContainer = document.getElementById('videoContainer');
            const video = document.getElementById('video');
            const playpause = document.getElementById('playpause');
            const progress = document.getElementById('progress');
            const progressBar = document.getElementById('progress-bar');
            const fullscreen = document.getElementById('fs');
            const playIcon = document.getElementById('play_icon');
            const stopIcon = document.getElementById('stop_icon');
            const maximizeIcon = document.getElementById('maximize_icon');
            const minimizeIcon = document.getElementById('minimize_icon');
            const trackPrev = document.getElementById('track_prev')
            const trackNext = document.getElementById('track_next')
            const currentTime = document.getElementById('current_time')
            const durationSpan = document.getElementById('duration')
            const info = document.getElementById('info')
            const filterBg = document.getElementById('filter_bg')
            const infoModal = document.getElementById('info_modal')
            const closeModal = document.getElementById('close_modal')
            const rate = document.getElementById('rate')
            const rateOptions = document.getElementById('rete_opts')

            rate.addEventListener('click', ()=>{
                rateOptions.classList.toggle('hidden')
            })

            const options = rateOptions.querySelectorAll('li');
            options.forEach(option => {
                option.addEventListener('click', (event) => {
                    const rateSelected = event.target.getAttribute('data-rate');
                    video.playbackRate = rateSelected;
                    rate.innerText = `x${rateSelected}`;
                    rateOptions.classList.add('hidden');
                });
            });

            filterBg.addEventListener('click',()=>{
                filterBg.classList.add('hidden')
                infoModal.classList.add('hidden')
            })

            closeModal.addEventListener('click', ()=>{
                filterBg.classList.add('hidden')
                infoModal.classList.add('hidden')
            })

            info.addEventListener('click', ()=>{
                filterBg.classList.remove('hidden')
                infoModal.classList.remove('hidden')
            })

            trackNext.addEventListener('click', ()=>{
                video.currentTime += 10;
            })

            trackPrev.addEventListener('click', ()=>{
                video.currentTime -= 10;
            })

            playpause.addEventListener('click', ()=>{
                if (video.paused || video.ended) video.play();
				else video.pause();
            })

            video.addEventListener('play', function() {
				changeButtonState('playpause');
			}, false);
            
			video.addEventListener('pause', function() {
				changeButtonState('playpause');
			}, false);

            video.addEventListener('loadedmetadata', function() {
				progress.setAttribute('max', video.duration);
                currentTimeDuration()
			});

            video.addEventListener('timeupdate', function() {
                currentTimeDuration()
				if (!progress.getAttribute('max')) progress.setAttribute('max', video.duration);
				progress.value = video.currentTime;
				progressBar.style.width = Math.floor((video.currentTime / video.duration) * 100) + '%';
			});

            video.addEventListener('click', ()=>{
                if (video.paused) {
                    video.play();
                } else { // Si se está reproduciendo, páralo
                    video.pause();
                }
            })

            progress.addEventListener('click', function(e) {
				const pos = (e.pageX  - (this.offsetLeft + this.offsetParent.offsetLeft + this.offsetParent.offsetParent.offsetLeft)) / this.offsetWidth;
				video.currentTime = pos * video.duration;
			});

            progress.addEventListener('mouseover', function (e) {
                const pos = (e.pageX - (this.offsetLeft + this.offsetParent.offsetLeft + this.offsetParent.offsetParent.offsetLeft)) / this.offsetWidth;
                const duration = pos * video.duration;
                const minutes = Math.floor(duration / 60);
                const seconds = Math.floor(duration % 60);
                const timeString = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                this.setAttribute('title', timeString);
            });

            fullscreen.addEventListener('click', ()=>{
                if(fullscreen.getAttribute("data-state") === 'maximize'){
                    fullscreen.setAttribute("data-state", 'minimize')
                    minimizeIcon.classList.remove('hidden')
                    maximizeIcon.classList.add('hidden')
                    videoContainer.requestFullscreen();
                }else{
                    fullscreen.setAttribute("data-state", 'maximize')
                    document.exitFullscreen();
                    minimizeIcon.classList.add('hidden')
                    maximizeIcon.classList.remove('hidden')
                }
            })

            function changeButtonState(type) {
				if (type == 'playpause') {
					if (video.paused || video.ended) {
                        playpause.setAttribute('data-state', 'play');
                        stopIcon.classList.add('hidden')
                        playIcon.classList.remove('hidden')
					}
					else {
                        playpause.setAttribute('data-state', 'pause');
                        stopIcon.classList.remove('hidden')
                        playIcon.classList.add('hidden')
					}
				}
				else if (type == 'maximizeminimize') {
                    if(fullscreen.getAttribute("data-state") === 'maximize'){
                        fullscreen.setAttribute("data-state", 'minimize')
                        minimizeIcon.classList.remove('hidden')
                        maximizeIcon.classList.add('hidden')
                        videoContainer.requestFullscreen();
                    }else{
                        fullscreen.setAttribute("data-state", 'maximize')
                        minimizeIcon.classList.add('hidden')
                        maximizeIcon.classList.remove('hidden')
                        document.exitFullscreen();
                    }
					
				}
			}

            function currentTimeDuration(){
                const currTime = Math.round(video.currentTime);
                const duration = Math.round(video.duration);
                
                const currentTimeStr = formatTime(currTime);
                const durationStr = formatTime(duration);

                currentTime.innerText = currentTimeStr;
                durationSpan.innerText = durationStr;
            }

            function formatTime(time) {
                let hours = Math.floor(time / 3600);
                let minutes = Math.floor((time % 3600) / 60);
                let seconds = time % 60;

                if (hours > 0) {
                    return `${hours}:${(minutes < 10 ? '0' : '') + minutes}:${(seconds < 10 ? '0' : '') + seconds}`;
                } else {
                    return `${minutes}:${(seconds < 10 ? '0' : '') + seconds}`;
                }
            }
        </script>
	</body>
</html>

