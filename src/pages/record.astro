---
import Navbar from "../components/Navbar.astro";
import Layout from "../layouts/Layout.astro";
import { CameraModel } from "../models/camera";

const user = Astro.locals.user;
if (!user)
	return Astro.redirect("/sign-in");

if (!user.payment)
	return Astro.redirect("/payment");

const { establishment_id } = user

const cameras = await CameraModel.getAll({establishment_id});

await fetch(`http://localhost:3000/run-stream?rtsp=${cameras[1].rtsp}`)

/*cameras.forEach(camera=>{
    fetch(`http://localhost:3000/run-stream?rtsp=${camera.rtsp}`)
})*/
---

<Layout title="SportsCamera!">
    <Navbar />
    <section class="bg-white h-full md:rounded-r-xl text-center z-0 max-w-4xl w-[5000px] overflow-hidden h-full pb-5">
		<strong class="font-medium text-2xl md:text-3xl text-primary text-nowrap">Grabar</strong>
        <div class="grid grid-cols-2 gap-2 p-5 overflow-scroll h-full ">
            {cameras && cameras.map(({ field_name, rtsp }) => {
                return <div class="flex flex-col w-full h-fit">
                    <span class="text-start text-bold text-l">{field_name}</span>
                    <video class="" id={rtsp} autoplay muted controls></video>
                    <div class="flex items-center gap-2 bg-black p-2">
                        <button class="border-none cursor-pointer w-6 h-6 rounded-full bg-[#646464] recordstop" data-state="record"></button>
                        <span class="text-[#646464] hidden record_span">Grabando</span>
                    </div>
                </div>
            })}
        </div>
	</section>
    <script is:inline src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script is:inline define:vars={{ cameras }}>
            const elements = document.getElementsByClassName("recordstop");
            for(let i = 0; i < elements.length; i++){
                elements[i].addEventListener('click',function(){
                    const { camera_id, rtsp } = cameras[i]
                    const recordSpan = this.parentNode.querySelector('.record_span');
                    if (this.getAttribute('data-state') === 'record'){
                        this.setAttribute('data-state', 'stop-record');
                        recordSpan.classList.remove('hidden');
                        this.classList.remove('bg-[#646464]');
                        this.classList.add('bg-red-500');
                        fetch(`http://localhost:3000/record?camera_id=${camera_id}&rtsp=${rtsp}`).then(response => console.log(response))
                    }
                    else{
                        this.setAttribute('data-state', 'record');
                        recordSpan.classList.add('hidden')
                        this.classList.remove('bg-red-500');
                        this.classList.add('bg-[#646464]');
                        fetch(`http://localhost:3000/stop-record?rtsp=${rtsp}`).then(response => console.log(response))
                    }
                })
            };

            cameras.forEach(({ rtsp }) => {
                if (Hls.isSupported()) {
                    const video = document.getElementById(rtsp);
                    video.play()
                    const hls = new Hls();
                    hls.attachMedia(video);
                    hls.on(Hls.Events.MEDIA_ATTACHED, function () {
                        const ip = rtsp.match(/rtsp:\/\/admin:password123@([\d.]+):/)[1];
                        console.log(ip)
                        hls.loadSource(`http://localhost:3000/get-stream/${ip}/index.m3u8`);
                    });
                }
            });
    </script>
    <!--<script is:inline src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <script is:inline>
        document.addEventListener('astro:page-load', () => {
            if (Hls.isSupported()) {
                const video = document.getElementById('video');
                const hls = new Hls();
                hls.attachMedia(video);
                hls.on(Hls.Events.MEDIA_ATTACHED, function () {
                    hls.loadSource("http://localhost:3000/192.168.0.64/output.m3u8");
                    hls.on(Hls.Events.MANIFEST_PARSED, function (event, data) {
                        console.log("manifest loaded, found " + data.levels.length + " quality level");
                    });
                });
            }
        }, { once: true });
    </script>-->
</Layout>
